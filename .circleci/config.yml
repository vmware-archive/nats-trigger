version: 2

## Definitions
build_allways: &build_allways
  filters:
    tags:
      only: /.*/
defaults: &defaults
  working_directory: /home/circleci/.go_workspace/src/github.com/kubeless/kubeless
  environment:
    GOPATH: /home/circleci/.go_workspace
    CONTROLLER_IMAGE_NAME: bitnami/kubeless-controller-manager
    BUILDER_IMAGE_NAME: kubeless/function-image-builder
    KAFKA_CONTROLLER_IMAGE_NAME: bitnami/kafka-trigger-controller
    NATS_CONTROLLER_IMAGE_NAME: bitnami/nats-trigger-controller
    KINESIS_CONTROLLER_IMAGE_NAME: bitnami/kinesis-trigger-controller
    CGO_ENABLED: "0"
    TEST_DEBUG: "1"
    GKE_VERSION: 1.8.8-gke.0
    MINIKUBE_VERSION: v0.25.2
    MANIFESTS: kubeless kubeless-non-rbac kubeless-openshift kafka-zookeeper kafka-zookeeper-openshift nats kinesis
exports: &exports
  # It is not possible to resolve env vars in the environment section:
  # https://discuss.circleci.com/t/using-environment-variables-in-config-yml-not-working/14237
  run: |
    CONTROLLER_TAG=${CIRCLE_TAG:-build-$CIRCLE_WORKFLOW_ID}
    echo "export CONTROLLER_TAG=${CONTROLLER_TAG}" >> $BASH_ENV
    echo "export CONTROLLER_IMAGE=${CONTROLLER_IMAGE_NAME}:${CONTROLLER_TAG}" >> $BASH_ENV
    echo "export FUNCTION_IMAGE_BUILDER=${BUILDER_IMAGE_NAME}:${CONTROLLER_TAG}" >> $BASH_ENV
    echo "export KAFKA_CONTROLLER_IMAGE=${KAFKA_CONTROLLER_IMAGE_NAME}:${CONTROLLER_TAG}" >> $BASH_ENV
    echo "export NATS_CONTROLLER_IMAGE=${NATS_CONTROLLER_IMAGE_NAME}:${CONTROLLER_TAG}" >> $BASH_ENV
    echo "export KINESIS_CONTROLLER_IMAGE=${KINESIS_CONTROLLER_IMAGE_NAME}:${CONTROLLER_TAG}" >> $BASH_ENV    
    echo "export KUBECFG_JPATH=/home/circleci/src/github.com/kubeless/kubeless/ksonnet-lib" >> $BASH_ENV
    echo "export PATH=$(pwd)/bats/libexec:$PATH" >> $BASH_ENV
restore_workspace: &restore_workspace
  run: |
    make bootstrap
    sudo cp -r /tmp/go/bin/* /usr/local/bin/
    cp -r /tmp/go/src/github.com/kubeless/kubeless/*yaml .
should_test: &should_test
  run: |
    case $CIRCLE_JOB in
    # In case of GKE we will only want to build if it is
    # a build of a branch in the kubeless/kubeless repository
    GKE)
      echo $CIRCLE_PULL_REQUESTS
      if [[ -n "$GKE_ADMIN" && -z "$CIRCLE_PULL_REQUESTS" ]]; then
        export SHOULD_TEST=1
      fi
      ;;
    # In kase of minikube+kafka we want to test it if
    # it is a Pull Request related to Kafka (discovered from the PR title)
    # or if the build is from the "master" branch
    minikube_kafka)
      if [[ -n "$CIRCLE_PULL_REQUESTS" ]]; then
        pr_kafka_title=$(curl -H "Authorization: token $ACCESS_TOKEN" "https://api.github.com/repos/$TRAVIS_REPO_SLUG/pulls/${CIRCLE_PR_NUMBER}" | grep title || true)
      fi
      if [[ -z "$CIRCLE_PULL_REQUESTS" || "$pr_kafka_title" == "" || "$pr_kafka_title" =~ ^.*(Kafka|kafka|KAFKA).*$ ]]; then
        export SHOULD_TEST=1
      fi
      ;;
    # In kase of minikube+NATS we want to test it if
    # it is a Pull Request related to NATS (discovered from the PR title)
    # or if the build is from the "master" branch
    minikube_nats)
      if [[ -n "$CIRCLE_PULL_REQUESTS" ]]; then
        pr_nats_title=$(curl -H "Authorization: token $ACCESS_TOKEN" "https://api.github.com/repos/$TRAVIS_REPO_SLUG/pulls/${TRAVIS_PULL_REQUEST}" | grep title || true)
      fi
      if [[ -z "$CIRCLE_PULL_REQUESTS" || "$pr_nats_title" == "" || "$pr_nats_title" =~ ^.*(Nats|nats|NATS).*$ ]]; then
        export SHOULD_TEST=1
      fi
      ;;
    # In kase of minikube+Kinesis we want to test it if
    # it is a Pull Request related to Kinesis (discovered from the PR title)
    # or if the build is from the "master" branch
    minikube_kinesis)
      if [[ -n "$CIRCLE_PULL_REQUESTS" ]]; then
        pr_kinesis_title=$(curl -H "Authorization: token $ACCESS_TOKEN" "https://api.github.com/repos/$TRAVIS_REPO_SLUG/pulls/${TRAVIS_PULL_REQUEST}" | grep title || true)
      fi
      if [[ -z "$CIRCLE_PULL_REQUESTS" || "$pr_kinesis_title" == "" || "$pr_kinesis_title" =~ ^.*(Kinesis|kinesis).*$ ]]; then
        export SHOULD_TEST=1
      fi
      ;;      
    esac
    echo "Should test? $SHOULD_TEST"
    if [[ "$SHOULD_TEST" != "1" ]]; then
      circleci step halt
    fi
#### End of definitions

workflows:
  version: 2
  kubeless:
    jobs:
      - build:
          <<: *build_allways
      - minikube:
          <<: *build_allways
          requires:
            - build
      - minikube_core_triggers:
          <<: *build_allways
          requires:
            - build
      - minikube_build_functions:
          <<: *build_allways
          requires:
            - build
      - minikube_kafka:
          <<: *build_allways
          requires:
            - build
      - minikube_nats:
          <<: *build_allways
          requires:
            - build
      - minikube_kinesis:
          <<: *build_allways
          requires:
            - build            
      - GKE:
          <<: *build_allways
          requires:
            - build
      - push_latest_images:
          filters:
            branches:
              only: master
          requires:
            - minikube
            - minikube_core_triggers
            - minikube_build_functions
            - minikube_kafka
            - minikube_nats
            - minikube_kinesis
            - GKE
      - release:
          filters:
            tags:
              only: /v.*/
            branches:
              ignore: /.*/
          requires:
            - minikube
            - minikube_core_triggers
            - minikube_build_functions
            - minikube_kafka
            - minikube_nats
            - minikube_kinesis
            - GKE
jobs:
  build:
    <<: *defaults
    docker:
      - image: circleci/golang:1.9 
    steps:
      - checkout
      - <<: *exports
      - run: make bootstrap
      - run: make VERSION=${CONTROLLER_TAG} binary
      - run: make test
      - run: make validation
      - run: make all-yaml
      - run: |
          mkdir build-manifests
          IFS=' ' read -r -a manifests <<< "$MANIFESTS"
          for f in "${manifests[@]}"; do
            sed -i.bak 's/:latest/'":${CONTROLLER_TAG}"'/g' ${f}.yaml
            cp ${f}.yaml build-manifests/
          done
      - persist_to_workspace:
          root: /home/circleci/.go_workspace
          paths: 
            - bin
            - src/github.com/kubeless/kubeless/*yaml
      - store_artifacts:
          path: /home/circleci/.go_workspace/bin/kubeless
      - store_artifacts:
          path: build-manifests
  minikube:
    <<: *defaults
    machine: true
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/go
      - <<: *exports
      - <<: *restore_workspace
      - run: ./script/pull-or-build-image.sh controller-image
      - run: ./script/integration-tests minikube deployment
      - run: ./script/integration-tests minikube basic
  minikube_core_triggers:
    <<: *defaults
    machine: true
    steps:
      - checkout
      - <<: *exports
      - attach_workspace:
          at: /tmp/go
      - <<: *restore_workspace
      - run: sudo apt-get update -y
      - run: sudo apt-get install -y apache2-utils
      - run: ./script/pull-or-build-image.sh controller-image
      - run: ./script/integration-tests minikube deployment
      - run: ./script/integration-tests minikube cronjob
      - run: ./script/integration-tests minikube http
  minikube_build_functions:
    <<: *defaults
    machine: true
    steps:
      - checkout
      - <<: *exports
      - attach_workspace:
          at: /tmp/go
      - <<: *restore_workspace
      - run: ./script/pull-or-build-image.sh controller-image
      - run: ./script/pull-or-build-image.sh function-image-builder
      - run: "echo '{\"host\": \"unix:///var/run/docker.sock\", \"storage-driver\": \"overlay2\", \"insecure-registries\" : [\"0.0.0.0/0\"]}' > /tmp/daemon.json"
      - run: sudo mv /tmp/daemon.json /etc/docker/daemon.json
      - run: sudo service docker restart
      - run: docker info
      - run: docker run -d -p 5000:5000 --restart=always --name registry -v /data/docker-registry:/var/lib/registry registry:2
      - run: "sed -i.bak 's/enable-build-step: \"false\"/enable-build-step: \"true\"/g' kubeless.yaml"
      - run: "sed -i.bak 's/function-registry-tls-verify: \"true\"/function-registry-tls-verify: \"false\"/g' kubeless.yaml"
      - run: ./script/integration-tests minikube deployment
      - run: ./script/integration-tests minikube prebuilt_functions
  minikube_kafka:
    <<: *defaults
    machine: true
    steps:
      - <<: *should_test
      - checkout
      - <<: *exports
      - attach_workspace:
          at: /tmp/go
      - <<: *restore_workspace
      - run: ./script/pull-or-build-image.sh controller-image
      - run: ./script/pull-or-build-image.sh kafka-controller-image
      - run: ./script/integration-tests minikube deployment
      - run: ./script/integration-tests minikube kafka
  minikube_nats:
    <<: *defaults
    machine: true
    steps:
      - <<: *should_test
      - checkout
      - <<: *exports
      - attach_workspace:
          at: /tmp/go
      - <<: *restore_workspace
      - run: ./script/pull-or-build-image.sh controller-image
      - run: ./script/pull-or-build-image.sh nats-controller-image
      - run: ./script/integration-tests minikube deployment
      - run: ./script/integration-tests minikube nats
  minikube_kinesis:
    <<: *defaults
    machine: true
    steps:
      - <<: *should_test
      - checkout
      - <<: *exports
      - attach_workspace:
          at: /tmp/go
      - <<: *restore_workspace
      - run: ./script/pull-or-build-image.sh controller-image
      - run: ./script/pull-or-build-image.sh kinesis-controller-image
      - run: ./script/integration-tests minikube deployment
      - run: ./script/integration-tests minikube kinesis      
  GKE:
    <<: *defaults
    docker:
      - image: circleci/golang:1.9 
    steps:
      - <<: *should_test
      - checkout
      - <<: *exports
      - attach_workspace:
          at: /tmp/go
      - <<: *restore_workspace
      - setup_remote_docker
      - run: ./script/enable-gcloud.sh $(pwd) > /dev/null
      - run: echo "export ESCAPED_GKE_CLUSTER=$(echo ${GKE_CLUSTER}-ci-${CIRCLE_BRANCH:-$CIRCLE_TAG} | sed 's/[^a-z0-9-]//g')" >> $BASH_ENV
      - run: ./script/start-gke-env.sh $ESCAPED_GKE_CLUSTER $ZONE $GKE_VERSION $GKE_ADMIN > /dev/null
      - run: ./script/pull-or-build-image.sh controller-image
      - run: ./script/pull-or-build-image.sh kafka-controller-image
      - run: ./script/integration-tests gke_${GKE_PROJECT}_${ZONE}_${ESCAPED_GKE_CLUSTER} deployment
      - run: ./script/integration-tests gke_${GKE_PROJECT}_${ZONE}_${ESCAPED_GKE_CLUSTER} basic
      - run: ./script/integration-tests gke_${GKE_PROJECT}_${ZONE}_${ESCAPED_GKE_CLUSTER} cronjob
      - run: ./script/integration-tests gke_${GKE_PROJECT}_${ZONE}_${ESCAPED_GKE_CLUSTER} kafka
  push_latest_images:
    <<: *defaults
    docker:
      - image: circleci/golang:1.9 
    steps:
      - <<: *exports
      - setup_remote_docker
      - run: docker login -u="$DOCKER_USERNAME" -p="$DOCKER_PASSWORD"   
      - run: |
          images=( 
            $CONTROLLER_IMAGE_NAME
            $BUILDER_IMAGE_NAME 
            $KAFKA_CONTROLLER_IMAGE_NAME 
            $NATS_CONTROLLER_IMAGE_NAME
            $KINESIS_CONTROLLER_IMAGE_NAME
          )
          for image in "${images[@]}"; do
            echo "Pulling ${image}:${CONTROLLER_TAG}"
            docker pull ${image}:${CONTROLLER_TAG}
            docker tag ${image}:${CONTROLLER_TAG} ${image}:latest
            docker push ${image}:latest
          done
  release:
    <<: *defaults
    docker:
      - image: circleci/golang:1.9 
    steps:
      - <<: *exports
      - checkout
      - attach_workspace:
          at: /tmp/go
      - <<: *restore_workspace
      - run: make VERSION=${CIRCLE_TAG} binary-cross
      - run: for d in bundles/kubeless_*; do zip -r9 $d.zip $d/; done
      - run: ./script/create_release.sh ${CIRCLE_TAG} "${MANIFESTS}"
