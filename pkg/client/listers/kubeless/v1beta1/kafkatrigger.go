/*
Copyright (c) 2016-2017 Bitnami

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package v1beta1

import (
	v1beta1 "github.com/kubeless/kubeless/pkg/apis/kubeless/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KafkaTriggerLister helps list KafkaTriggers.
type KafkaTriggerLister interface {
	// List lists all KafkaTriggers in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.KafkaTrigger, err error)
	// KafkaTriggers returns an object that can list and get KafkaTriggers.
	KafkaTriggers(namespace string) KafkaTriggerNamespaceLister
	KafkaTriggerListerExpansion
}

// kafkaTriggerLister implements the KafkaTriggerLister interface.
type kafkaTriggerLister struct {
	indexer cache.Indexer
}

// NewKafkaTriggerLister returns a new KafkaTriggerLister.
func NewKafkaTriggerLister(indexer cache.Indexer) KafkaTriggerLister {
	return &kafkaTriggerLister{indexer: indexer}
}

// List lists all KafkaTriggers in the indexer.
func (s *kafkaTriggerLister) List(selector labels.Selector) (ret []*v1beta1.KafkaTrigger, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.KafkaTrigger))
	})
	return ret, err
}

// KafkaTriggers returns an object that can list and get KafkaTriggers.
func (s *kafkaTriggerLister) KafkaTriggers(namespace string) KafkaTriggerNamespaceLister {
	return kafkaTriggerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KafkaTriggerNamespaceLister helps list and get KafkaTriggers.
type KafkaTriggerNamespaceLister interface {
	// List lists all KafkaTriggers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.KafkaTrigger, err error)
	// Get retrieves the KafkaTrigger from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.KafkaTrigger, error)
	KafkaTriggerNamespaceListerExpansion
}

// kafkaTriggerNamespaceLister implements the KafkaTriggerNamespaceLister
// interface.
type kafkaTriggerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KafkaTriggers in the indexer for a given namespace.
func (s kafkaTriggerNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.KafkaTrigger, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.KafkaTrigger))
	})
	return ret, err
}

// Get retrieves the KafkaTrigger from the indexer for a given namespace and name.
func (s kafkaTriggerNamespaceLister) Get(name string) (*v1beta1.KafkaTrigger, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("kafkatrigger"), name)
	}
	return obj.(*v1beta1.KafkaTrigger), nil
}
